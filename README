README file for PETRI: Petri Net Library for the CD++ tool
----------------------------------------------------------
LAST UPDATED: 01 AUG 2002

This README file describes how to use the PETRI sample you
downloaded.  The MS Word document Petri_Users_Manual.doc is
more complete hence it should be used instead of this readme 
if possible.

WHAT IS PETRI?
--------------
PETRI is a library which allows the CD++ tool simulator to
simulate Petri Nets.  Also included are a set of tools
to allow easy creation of model definition files (.ma)
the CD++ simulator understands and tools allowing the
output of the CD++ simulator (.log) to be translated in 
a more readeable Petri Net flavoured format.  In essence
PETRI is a wrapper around the CD++ toolkit to allow modellers
to use Petri Nets for modelling and simulation.


HOW DO INSTALL PETRI?
---------------------
1.  The first step is to download and unzip the CD++ toolkit if
that has not been done already.  This is necessary because PETRI 
alone is not a simulation tool.  It has to be installed on top
of the CD++ toolkit.

2.  Then dowload and unzip PETRI into the same directory where the 
CD++ toolkit was unzipped.  This will cause the CD++ toolkit
makefile and register.cpp to be replaced so back up the originals
before unzipping PETRI. 

3.  Then build a new simulator by issuing the "make" command from
the cygwin shell: 
-> make

This will cause register.cpp, pnPlace.cpp and pnTrans.cpp to be
compiled and a new simu.exe to be created.  This new simulator
knows how to simulate Petri Nets.  If you wish to keep the original
simu.exe make sure to back up the file before issuing the make
command.

HOW DO I USE PETRI?
-------------------
Because in the previous step PETRI was installed on top of the
CD++ simulator, you simply use the CD++ toolkit as per normal.
The difference now is that the tool understands model definition
files (.ma) which define Petri Nets and it is able to simulate
PN models.  For example:

-> simu -mmyPetriNet.ma -lmyPetriNet.log -w10-3 -t00:10:00:00

The log file contains the results of the PN simulation.  This type
of file is rather cryptic so a TCL tool was written to convert
it to a Petri Net flavoured format.  This is described in more
details below.

HOW DO I WRITE A PETRI NET MODEL DEFINITION FILE?
-------------------------------------------------
The pn_dev_model.doc file describes, amongst other things, the 
DEVS place and transition models used by the Petri Net library.
Reading section 3 of the document will greatly help you understand
how to write the model definition file (.ma) representing a PN.

PETRI includes numerous .ma files defining various Petri Nets.  Use
them as examples.  All of them are described in more details in the
pn_dev_model.doc file.  For example there is a simplified multiprocessing
algorithm in multiprocessing.ma.

Perhaps the most convenient way to create Petri Net .ma files 
is to use the HPSIM tool which is a GUI based PN model creation
and simulation tool.  It has a solid GUI and it is easy to use.
It is available free of charge on the Web.  PETRI has a TCL tool
capable of converting files generated using HPSIM into .ma files.
After having completed you Petri Net using HPSIM's GUI, simply
export the file into the .hpx format.  Use the following pull down
menu to do so:

File->Export->File

When you have a .hpx file, convert it to a .ma using the hpx2ma.tcl
tool.  Invoke it like so:

->wish hpx2ma.tcl myPNFile.hpx myPNFile.ma

wish invokes a TCl interpreter which is not functionality provided
by the basic cygwin.  However, there are few TCl packages available
on the Web which run on cygwin.  You will need to install one to use
hpx2ma.tcl tool.

For your convenience PETRI contains many .hpx files so you can 
experience with the hpx2ma.tcl without having to use HPSIM
right away.  Documentation for the tool is located in the source file.

HOW CAN I VIEW SIMULATION RESULTS?
----------------------------------
As mentioned before, the log file (.log) generated by the CD++
simulator contains the simulation results.  Given this file is
rather cryptic, a TCL tool, called pnmark.tcl is included in 
PETRI to convert a .log file into a .pn file.  This type of
file is text based and shows transition firings and PN markings
resulting from these firings.  The tool is used as follows:

->wish pnmark.tcl myPNFile.hpx myPNFile.ma myPNFile.pn

wish invokes a TCl interpreter which is not functionality provided
by the basic cygwin.  However, there are few TCl packages available
on the Web which run on cygwin.  You will need to install one to use
hpx2ma.tcl tool.  Documentation for the tool is located in the source 
file.

ARE THERE ANY DEMOs?
--------------------
PETRI contains many demos in the form of batch files.  There are two 
types of demos.  One type simply invokes the CD++ simulator to make
it simulate .ma files.  To run such a demo type:

->./mutual_exclusion.bat

This invokes the simulator, telling it to use pnTest1.ma as the 
model definition file and storing simulation results in pnTest1.log.
You can then use pnmark to convert that .log into a .pn to view 
simulation results in a more suitable format.

There is another type of demo, more involved, which takes a .hpx 
file, converts it to .ma, then invokes the simulator and finally 
converts the resulting log into a .pn file.  To run such a demo type:

->./mutual_exclusion_hpx.bat

This will cause mutual_exclusion_hpx.ma, mutual_exclusion_hpx.log 
and mutual_exclusion_hpx.pn to be generated.  In essence this demo 
is the automated version of what a modeller would have to manually 
do to simulate a .hpx using CD++.

WHERE CAN I OBTAIN MORE INFORMATION REGARDING PETRI?
----------------------------------------------------

The pn_dev_model.doc file provides a lot of information
regarding the PETRI.  More specifically:

1. It describes what Petri Nets are.
2. It describes the DEVS models used by PETRI to implement
   transitions and places.
3. It describes in details the tests that were performed
   to validate the PETRI implementation.
4. It describes in details the demos that are included in PETRI.


WHAT FILES ARE INCLUDED IN PETRI?
---------------------------------
The following files are included in PETRI:


README		What you are reading now

makefile	These two files are needed to build a CD++ simulator 
register.cpp	capable of understanding PN model definition files (.ma)

pnTrans.cpp	These four files contain the C++ implementation
pnTrans.h 	of the transition and place DEVS atomic models used
pnPlace.cpp 	by CD++ to simulate PNs.
pnPlace.h

pnmark.tcl	Tool to generate a Petri Net marking file (.pn)
		from a .log file. 
hpx2ma.tcl	Tool to convert an HPSIM model definition file (.hpx)
		into a CD++ model definition file (.ma)
		

pnTransTest1.bat  These are demo batch files.  They invoke the
pnPlaceTest1.bat  CD++ simulator with the appropriate .ma file
pnTest1.bat	  causing a simulation ouput file (.log) to be
pnTest2.bat	  generated.
pnTest3.bat
pnTest4.bat
elevator.bat
multiprocessing.bat
mutual_exclusion.bat
pipeline.bat
scheduling.bat

pnPlaceTest1.ma	 These .ma files contain the coupled model 
pnTransTest1.ma	 definitions used by the demo batch files 
pnTest1.ma	 above. 
pnTest2.ma
pnTest3.ma
pnTest4.ma
elevator.ma
multiprocessing.ma
mutual_exclusion.ma
pipeline.ma
scheduling.ma

pnPlaceTest1.ev  These .ev files contain external events used 
pnTransTest1.ev  by the pnPlaceTest1.bat and pnTransTest1.bat files.

pnTest1.pn	These .pn files contain Petri Net markings obtained 
pnTest2.pn	by running the pnmark conversion tool on the .log 
pnTest3.pn	files generated by the demo batch files mentioned above.
pnTest4.pn	
elevator.pn	
pipeline.pn 	
mutual_exclusion.pn
multiprocessing.pn
scheduling.pn

pnTest1_hpx.bat  These are "hpx" demo batch files.  They show how to 
pntest2_hpx.bat  automate the process of going from an HPSIM model
pnTest3_hpx.bat	 definition file (.hpx) to a PN simulation result 
pnTest4_hpx.bat  (.pn) file.
elevator_hpx.bat
mutual_exclusion_hpx.bat
scheduling_hpx.bat

pnTest1.hpx	These are HPSIM model definition files used by the 
pnTest2.hpx	"hpx" demo batch files mentioned above.
pnTest3.hpx
pnTest4.hpx	
elevator.hpx	
mutual_exclusion.hpx
scheduling.hpx

